From: "Saved by Internet Explorer 11"
Subject: 
Date: Sun, 22 Nov 2015 14:02:08 -0000
MIME-Version: 1.0
Content-Type: text/html;
	charset="Windows-1252"
Content-Transfer-Encoding: quoted-printable
Content-Location: https://storage.googleapis.com/supplemental_media/udacityu/5414088915/ipython_notebook_tutorial.ipynb
X-MimeOLE: Produced By Microsoft MimeOLE V6.1.7601.17609

<!DOCTYPE HTML>
<!DOCTYPE html PUBLIC "" ""><HTML><HEAD><META content=3D"IE=3D11.0000"=20
http-equiv=3D"X-UA-Compatible">

<META http-equiv=3D"Content-Type" content=3D"text/html; =
charset=3Dwindows-1252">
<META name=3D"GENERATOR" content=3D"MSHTML 11.00.9600.18098"></HEAD>
<BODY>
<PRE>{=0A=
 "cells": [=0A=
  {=0A=
   "cell_type": "markdown",=0A=
   "metadata": {},=0A=
   "source": [=0A=
    "# Text Using Markdown\n",=0A=
    "\n",=0A=
    "**If you double click on this cell**, you will see the text change =
so that all of the formatting is removed. This allows you to edit this =
block of text. This block of text is written using =
[Markdown](http://daringfireball.net/projects/markdown/syntax), which is =
a way to format text using headers, links, italics, and many other =
options. Hit shift + enter or shift + return to show the formatted text =
again. This is called \"running\" the cell, and you can also do it using =
the run button in the toolbar."=0A=
   ]=0A=
  },=0A=
  {=0A=
   "cell_type": "markdown",=0A=
   "metadata": {},=0A=
   "source": [=0A=
    "# Code cells\n",=0A=
    "\n",=0A=
    "One great advantage of IPython notebooks is that you can show your =
Python code alongside the results, add comments to the code, or even add =
blocks of text using Markdown. These notebooks allow you to collaborate =
with others and share your work. The following cell is a code cell."=0A=
   ]=0A=
  },=0A=
  {=0A=
   "cell_type": "code",=0A=
   "execution_count": null,=0A=
   "metadata": {=0A=
    "collapsed": false=0A=
   },=0A=
   "outputs": [],=0A=
   "source": [=0A=
    "# Hit shift + enter or use the run button to run this cell and see =
the results\n",=0A=
    "\n",=0A=
    "print 'hello world'"=0A=
   ]=0A=
  },=0A=
  {=0A=
   "cell_type": "code",=0A=
   "execution_count": null,=0A=
   "metadata": {=0A=
    "collapsed": false=0A=
   },=0A=
   "outputs": [],=0A=
   "source": [=0A=
    "# The last line of every code cell will be displayed by default, =
\n",=0A=
    "# even if you don't print it. Run this cell to see how this =
works.\n",=0A=
    "\n",=0A=
    "2 + 2 # The result of this line will not be displayed\n",=0A=
    "3 + 3 # The result of this line will be displayed, because it is =
the last line of the cell"=0A=
   ]=0A=
  },=0A=
  {=0A=
   "cell_type": "markdown",=0A=
   "metadata": {},=0A=
   "source": [=0A=
    "# Nicely formatted results\n",=0A=
    "\n",=0A=
    "IPython notebooks allow you to display nicely formatted results, =
such as plots and tables, directly in\n",=0A=
    "the notebook. You'll learn how to use the following libraries later =
on in this course, but for now here's a\n",=0A=
    "preview of what IPython notebook can do."=0A=
   ]=0A=
  },=0A=
  {=0A=
   "cell_type": "code",=0A=
   "execution_count": null,=0A=
   "metadata": {=0A=
    "collapsed": false=0A=
   },=0A=
   "outputs": [],=0A=
   "source": [=0A=
    "# If you run this cell, you should see the values displayed as a =
table.\n",=0A=
    "\n",=0A=
    "# Pandas is a software library for data manipulation and analysis. =
You'll learn to use it later in this course.\n",=0A=
    "import pandas as pd\n",=0A=
    "\n",=0A=
    "df =3D pd.DataFrame({'a': [2, 4, 6, 8], 'b': [1, 3, 5, 7]})\n",=0A=
    "df"=0A=
   ]=0A=
  },=0A=
  {=0A=
   "cell_type": "code",=0A=
   "execution_count": null,=0A=
   "metadata": {=0A=
    "collapsed": false=0A=
   },=0A=
   "outputs": [],=0A=
   "source": [=0A=
    "# If you run this cell, you should see a scatter plot of the =
function y =3D x^2\n",=0A=
    "\n",=0A=
    "%pylab inline\n",=0A=
    "import matplotlib.pyplot as plt\n",=0A=
    "\n",=0A=
    "xs =3D range(-30, 31)\n",=0A=
    "ys =3D [x ** 2 for x in xs]\n",=0A=
    "\n",=0A=
    "plt.scatter(xs, ys)"=0A=
   ]=0A=
  },=0A=
  {=0A=
   "cell_type": "markdown",=0A=
   "metadata": {},=0A=
   "source": [=0A=
    "# Creating cells \n",=0A=
    " \n",=0A=
    "To create a new **code cell**, click \"Insert &gt; Insert Cell =
[Above or Below]\". A code cell will automatically be created.\n",=0A=
    "\n",=0A=
    "To create a new **markdown cell**, first follow the process above =
to create a code cell, then change the type from \"Code\" to =
\"Markdown\" using the dropdown next to the run, stop, and restart =
buttons."=0A=
   ]=0A=
  },=0A=
  {=0A=
   "cell_type": "markdown",=0A=
   "metadata": {},=0A=
   "source": [=0A=
    "# Re-running cells\n",=0A=
    "\n",=0A=
    "If you find a bug in your code, you can always update the cell and =
re-run it. However, any cells that come afterward won't be automatically =
updated. Try it out below. First run each of the three cells. The first =
two don't have any output, but you will be able to tell they've run =
because a number will appear next to them, for example, \"In [5]\". The =
third cell should output the message \"Intro to Data Analysis is =
awesome!\""=0A=
   ]=0A=
  },=0A=
  {=0A=
   "cell_type": "code",=0A=
   "execution_count": null,=0A=
   "metadata": {=0A=
    "collapsed": false=0A=
   },=0A=
   "outputs": [],=0A=
   "source": [=0A=
    "class_name =3D \"Intro to Data Analysis\""=0A=
   ]=0A=
  },=0A=
  {=0A=
   "cell_type": "code",=0A=
   "execution_count": null,=0A=
   "metadata": {=0A=
    "collapsed": false=0A=
   },=0A=
   "outputs": [],=0A=
   "source": [=0A=
    "message =3D class_name + \" is awesome!\""=0A=
   ]=0A=
  },=0A=
  {=0A=
   "cell_type": "code",=0A=
   "execution_count": null,=0A=
   "metadata": {=0A=
    "collapsed": false=0A=
   },=0A=
   "outputs": [],=0A=
   "source": [=0A=
    "message"=0A=
   ]=0A=
  },=0A=
  {=0A=
   "cell_type": "markdown",=0A=
   "metadata": {},=0A=
   "source": [=0A=
    "Once you've run all three cells, try modifying the first one to set =
`class_name` to your name, rather than \"Intro to Data Analysis\", so =
you can print that you are awesome.  Then rerun the first and third =
cells without rerunning the second.\n",=0A=
    "\n",=0A=
    "You should have seen that the third cell still printed \"Intro to =
Data Analysis is awesome!\"  That's because you didn't rerun the second =
cell, so even though the `class_name` variable was updated, the =
`message` variable was not.  Now try rerunning the second cell, and then =
the third.\n",=0A=
    "\n",=0A=
    "You should have seen the output change to \"*your name* is =
awesome!\"  Often, after changing a cell, you'll want to rerun all the =
cells below it.  You can do that quickly by clicking \"Cell &gt; Run All =
Below\"."=0A=
   ]=0A=
  }=0A=
 ],=0A=
 "metadata": {=0A=
  "kernelspec": {=0A=
   "display_name": "Python 2",=0A=
   "language": "python",=0A=
   "name": "python2"=0A=
  },=0A=
  "language_info": {=0A=
   "codemirror_mode": {=0A=
    "name": "ipython",=0A=
    "version": 2=0A=
   },=0A=
   "file_extension": ".py",=0A=
   "mimetype": "text/x-python",=0A=
   "name": "python",=0A=
   "nbconvert_exporter": "python",=0A=
   "pygments_lexer": "ipython2",=0A=
   "version": "2.7.10"=0A=
  }=0A=
 },=0A=
 "nbformat": 4,=0A=
 "nbformat_minor": 0=0A=
}=0A=
</PRE></BODY></HTML>
